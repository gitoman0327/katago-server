Installing tensorflow for C++ (2018-06)

This was a bit of a mess, tensorflow C++ installation is extremely
non-user-friendly if you want to do it outside of Tensorflow's repo
and build setup, as a separate project. Documenting it just for future
self-reference.

Cloned:
https://github.com/FloopCZ/tensorflow_cc

Installed the recommended things. Since I was on Ubuntu 16 intead of
18, and did not have g++-7 available, merely cuda 9.0, I reverted
commit 9d4a253b5616a848240c6bc6f3d462f6992d853d.

After it built and I installed it, the example.cpp suggested did NOT
compile because apparently tensorflow 1.8 uses protobuf version 3.5.0,
which bazel downloads for itself and uses, resulting in stuff like at
the top of:
/usr/local/include/tensorflow/bazel-genfiles/tensorflow/core/framework/tensor_description.pb.h

with preprocessor directives:
#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

The protobuf version that cames with the Amazon's machine learning image
was 3.4.1, which could be found by looking at:

<ANACONDA_INSTALL_DIR>/include/google/protobuf/stubs/common.h

or by running the protoc tool:

protoc --version

I tried installing a newer one via apt but it wasn't
obviously available. I compiled it manually by downloading it from:

https://github.com/google/protobuf/releases/download/v3.5.0/protobuf-cpp-3.5.0.zip

and running:

./configure
make
sudo make install

But that actually didn't work. It turns out the protobuf includes,
libs, and protoc binary were installed via anaconda, with the anaconda
lib and include and bin directories added to the appropriate include
search paths, link search paths, and PATH.

So after various false starts (e.g. installing it via pip instead of conda),
I installed it. One obstacle was that 3.5.0 was no longer available on anaconda.
Apparently some protobuf dev decided to delete 3.5.0 which had a bug, but that
broke people's dependencies, which people complained about here:
https://github.com/google/protobuf/issues/3942

And conda didn't have the fixed version, 3.5.0.post1. But anyways, conda had 3.5.1
and thankfully, 3.5.1 has the property that it's compatible with stuff that wants
an older protoc tool:

// The current version, represented as a single integer to make comparison
// easier:  major * 10^6 + minor * 10^3 + micro
#define GOOGLE_PROTOBUF_VERSION 3005001

// The minimum protoc version which works with the current version of the
// headers.
#define GOOGLE_PROTOBUF_MIN_PROTOC_VERSION 3005000

So after updating it via conda:
conda install protobuf=3.5.1

Then the instructions at https://github.com/FloopCZ/tensorflow_cc worked.
For reference, those were:

git clone https://github.com/FloopCZ/tensorflow_cc.git
cd tensorflow_cc
mkdir build && cd build
# for static library only:
# cmake ..
# for shared library only (requires Bazel):
cmake -DTENSORFLOW_STATIC=OFF -DTENSORFLOW_SHARED=ON ..
make && sudo make install
# optional (free disk space)
# cleanup bazel build directory
rm -rf ~/.cache
# remove the build folder
cd .. && rm -rf build


// example.cpp
#include <tensorflow/core/platform/env.h>
#include <tensorflow/core/public/session.h>
#include <iostream>
using namespace std;
using namespace tensorflow;

int main()
{
    Session* session;
    Status status = NewSession(SessionOptions(), &session);
    if (!status.ok()) {
        cout << status.ToString() << "\n";
        return 1;
    }
    cout << "Session successfully created.\n";
}

# CMakeLists.txt
find_package(TensorflowCC REQUIRED)
add_executable(example example.cpp)

# Link the static Tensorflow library.
# target_link_libraries(example TensorflowCC::Static)

# Altenatively, link the shared Tensorflow library.
target_link_libraries(example TensorflowCC::Shared)

# For shared library setting, you may also link cuda if it is available.
find_package(CUDA)
if(CUDA_FOUND)
  target_link_libraries(example ${CUDA_LIBRARIES})
endif()



Also, this post was helpful as a reference:
https://medium.com/@TomPJacobs/c-tensorflow-a-journey-bdecbbdd0f65



-------------------------------------------------------------------------------

Tensorflow tools

Also for exporting graphs, I needed the following tools:

git clone https://github.com/tensorflow/tensorflow.git
cd tensorflow
bazel build tensorflow/tools/graph_transforms:transform_graph
bazel build tensorflow/tools/graph_transforms:summarize_graph
